(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{330:function(e,t,n){"use strict";n.r(t);var a=n(7),s=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),t("p",[e._v("在建立 Vue 的网站开发过程中，我们可能会自己封装组件 (Component) 让代码可以被重复使用，也方便开发者维护。这些一个个的组件可以通过"),t("code",[e._v("全局注册 (Global Registration)")]),e._v("让整个 Vue 应用程序中都可以使用这个组件，也可以通过"),t("code",[e._v("区域注册 (Local Registration)")]),e._v("在特定的组件再重新载入使用。接下来我们将介绍 Nuxt 3 使用组件时应该遵循的规范及特色。")]),e._v(" "),t("h2",{attrs:{id:"组件自动载入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组件自动载入"}},[e._v("#")]),e._v(" 组件自动载入")]),e._v(" "),t("p",[e._v("在 Vue 中，虽然局部注册使得组件间的依赖关系更加明确且对于"),t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking",target:"_blank",rel:"noopener noreferrer"}},[e._v("Tree shaking"),t("OutboundLink")],1),e._v("更加友好，但我们在使用组件时，就得在需要的地方个别载入及注册。而 Nuxt 3 提供在"),t("code",[e._v("components")]),e._v("目录下专门放置这些组件，并具有自动载入及延迟载入等功能特色。")]),e._v(" "),t("h3",{attrs:{id:"建立与使用组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#建立与使用组件"}},[e._v("#")]),e._v(" 建立与使用组件")]),e._v(" "),t("p",[e._v("新增 "),t("code",[e._v("./components/IronManWelcome.vue")]),e._v("，內容如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('<template>\n  <div class="bg-white py-24">\n    <div class="flex flex-col items-center">\n      <h1 class="text-6xl font-semibold text-sky-400">2022 iThome</h1>\n    </div>\n  </div>\n</template>\n')])])]),t("p",[e._v("调整 "),t("code",[e._v("./app.vue")]),e._v("，內容如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v(" <template>\n   <div>\n     <IronManWelcome />\n   </div>\n </template>\n")])])]),t("p",[e._v("当我们建立了"),t("code",[e._v("./components/IronManWelcome.vue")]),e._v("文件后，Nuxt会自动载入"),t("code",[e._v("./components")]),e._v("目录中的任何组件，并且在使用时的组件名称也对应着文件名称，所以我们只需直接添加"),t("code",[e._v("<IronManWelcome />")]),e._v("就可以直接使用这个组件。")]),e._v(" "),t("h2",{attrs:{id:"组件名称"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组件名称"}},[e._v("#")]),e._v(" 组件名称")]),e._v(" "),t("p",[e._v("Nuxt所自动载入"),t("code",[e._v("./components")]),e._v("目录下的组件，在使用时的组件名称也对应着文件名称。而当你在嵌套的目录结构下的组件，组件的名称将会基于目录的路径与文件名称，并删除重复的字段。")]),e._v(" "),t("p",[e._v("例如，如果"),t("code",[e._v("./components")]),e._v("目录结构如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("components/\n└── base/\n    └── apply/\n        └── Button.vue\n")])])]),t("p",[t("code",[e._v("./components/base/apply/Button.vue")]),e._v("组件的名称就会是由目录与文件名称组合出的"),t("code",[e._v("<BaseApplyButton>")]),e._v("。")]),e._v(" "),t("p",[e._v("为了开发上能更清楚辨别，建议将文件名称设置与使用组件时的名称相同。因此我们重新命名**./components/base/apply/"),t("strong",[e._v("下的")]),e._v("Button.vue**为"),t("code",[e._v("BaseApplyButton.vue")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("components/\n└── base/\n    └── apply/\n        └── BaseApplyButton.vue\n")])])]),t("p",[e._v("你也不用担心组件名称会变成"),t("code",[e._v("<BaseApplyBaseApplyButton>")]),e._v("看起来有点丑丑的，因为Nuxt会帮我们"),t("code",[e._v("删除重复的字段")]),e._v("，所以在使用时组件名称为"),t("code",[e._v("<BaseApplyButton>")]),e._v("。")]),e._v(" "),t("h3",{attrs:{id:"组件名称的命名规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组件名称的命名规则"}},[e._v("#")]),e._v(" 组件名称的命名规则")]),e._v(" "),t("p",[e._v("Vue在注册组件时，可以使用大驼峰式命名法 (Pascal Case) 或烤肉串命名法 (Kebab Case) 来为组件命名，并在"),t("strong",[e._v("template")]),e._v("也可以自由使用两种命名方式作为使用组件的标签。")]),e._v(" "),t("p",[e._v("例如，以"),t("code",[e._v("<base-apply-button>")]),e._v("来表示使用"),t("code",[e._v("./components/base/apply/BaseApplyButton.vue")]),e._v("组件。")]),e._v(" "),t("p",[e._v("抑或建立"),t("code",[e._v("./components/base/apply/base-apply-button.vue")]),e._v("组件，使用时以"),t("code",[e._v("<BaseApplyButton>")]),e._v("表示。")]),e._v(" "),t("p",[e._v("这两种方式Nuxt都支持，可以根据自己的习惯做选择。我个人是以"),t("code",[e._v("大驼峰式命名法 (Pascal Case)")]),e._v("为主，以此区别为自己建立的组件。")]),e._v(" "),t("h2",{attrs:{id:"动态组件-dynamic-components"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#动态组件-dynamic-components"}},[e._v("#")]),e._v(" 动态组件 (Dynamic Components)")]),e._v(" "),t("p",[e._v("如果想要使用像Vue中的"),t("code",[e._v('<component :is="someComputedComponent">')]),e._v("来动态的切换不同的组件，则需要使用Vue提供的"),t("code",[e._v("resolveComponentVue")]),e._v("方法来进行辅助。")]),e._v(" "),t("p",[e._v("例如：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("<template>\n  <component :is=\"show ? DynamicComponent : 'div'\" />\n</template>\n\n<script setup>\nconst show = ref(false)\nconst DynamicComponent = resolveComponent('BaseApplyButton')\n<\/script>\n")])])]),t("h3",{attrs:{id:"建立动态组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#建立动态组件"}},[e._v("#")]),e._v(" 建立动态组件")]),e._v(" "),t("h4",{attrs:{id:"step-1-建立组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-1-建立组件"}},[e._v("#")]),e._v(" Step 1. 建立组件")]),e._v(" "),t("p",[e._v("新增"),t("code",[e._v("./components/base/apply/BaseApplyButton.vue")]),e._v("，内容如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('<template>\n  <button\n    type="submit"\n    class="mt-6 bg-blue-600 py-3 px-8 text-xl font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"\n  >\n    立即报名\n  </button>\n</template>\n')])])]),t("p",[e._v("新增"),t("code",[e._v("./components/round/apply/RoundApplyButton.vue")]),e._v("，内容如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('<template>\n  <button\n    type="submit"\n    class="mt-6 rounded-full bg-blue-600 py-3 px-8 text-xl font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"\n  >\n    立即报名\n  </button>\n</template>\n')])])]),t("h4",{attrs:{id:"step-2-使用-resolvecomponent"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-2-使用-resolvecomponent"}},[e._v("#")]),e._v(" Step 2. 使用 resolveComponent()")]),e._v(" "),t("p",[e._v("调整"),t("code",[e._v("./app.vue")]),e._v("，内容如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('<template>\n  <div class="flex flex-col items-center">\n    <div class="mt-8 flex items-center">\n      <input\n        id="show-button"\n        v-model="useRound"\n        name="show-button"\n        type="checkbox"\n        class="h-5 w-5"\n      />\n      <label for="show-button" class="ml-2 block text-base text-slate-800">使用圆角按钮</label>\n    </div>\n    <component :is="useRound ? RoundButton : BaseButton" />\n  </div>\n</template>\n\n<script setup>\n  const useRound = ref(false)\n  const BaseButton = resolveComponent(\'BaseApplyButton\')\n  const RoundButton = resolveComponent(\'RoundApplyButton\')\n<\/script>\n')])])]),t("h4",{attrs:{id:"呈现效果"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#呈现效果"}},[e._v("#")]),e._v(" 呈现效果")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3bd0eabc575d4ae883a799c04f0c0ee9~tplv-k3u1fbpfcp-zoom-1.image",alt:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a39f2503d81c454193a8f4a800e3fb68~tplv-k3u1fbpfcp-zoom-1.image"}})]),e._v(" "),t("h2",{attrs:{id:"动态加载-dynamic-imports"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#动态加载-dynamic-imports"}},[e._v("#")]),e._v(" 动态加载 (Dynamic Imports)")]),e._v(" "),t("p",[e._v("动态加载 (Dynamic Imports) 组件也称之为"),t("code",[e._v("延迟加载 (lazy-loading)")]),e._v("，如果页面中不需要立刻使用或显示某个组件，通过动态加载的方式可以"),t("code",[e._v("延迟组件加载的时间点")]),e._v("，有助于优化 JavaScript 首次加载时的文件大小。")]),e._v(" "),t("p",[e._v("使用的方式也非常简单，只需要在使用组件时，加上前缀"),t("code",[e._v("Lazy")]),e._v("就可以有延迟加载的效果。")]),e._v(" "),t("h3",{attrs:{id:"建立一个动态加载的按钮"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#建立一个动态加载的按钮"}},[e._v("#")]),e._v(" 建立一个动态加载的按钮")]),e._v(" "),t("h4",{attrs:{id:"step-1-建立按钮组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-1-建立按钮组件"}},[e._v("#")]),e._v(" Step 1. 建立按钮组件")]),e._v(" "),t("p",[e._v("新增"),t("code",[e._v("./components/base/apply/BaseApplyButton.vue")]),e._v("，内容如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('<template>\n  <button\n    type="submit"\n    class="mt-6 rounded-sm bg-blue-600 py-3 px-8 text-xl font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"\n  >\n    立即报名\n  </button>\n</template>\n')])])]),t("h4",{attrs:{id:"step-2-添加lazy前缀"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-2-添加lazy前缀"}},[e._v("#")]),e._v(" Step 2. 添加"),t("code",[e._v("Lazy")]),e._v("前缀")]),e._v(" "),t("p",[e._v("调整 "),t("code",[e._v("./app.vue")]),e._v("，内容如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('<template>\n  <div class="flex flex-col items-center">\n    <div class="mt-8 flex items-center">\n      <input id="show-button" v-model="show" name="show-button" type="checkbox" class="h-5 w-5" />\n      <label for="show-button" class="ml-2 block text-base text-slate-800">显示报名按钮</label>\n    </div>\n    <LazyBaseApplyButton v-if="show" />\n  </div>\n</template>\n\n<script setup>\nconst show = ref(false)\n<\/script>\n')])])]),t("h4",{attrs:{id:"看看延迟加载的效果"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#看看延迟加载的效果"}},[e._v("#")]),e._v(" 看看延迟加载的效果")]),e._v(" "),t("p",[e._v("在页面上有一个核取方块，用户勾选时才显示按钮，我们通过浏览器的开发者工具观察网络 (Network) 的使用情况，可以发现只有首次勾选后才请求了 "),t("code",[e._v("BaseApplyButton.vue")]),e._v(" 按钮组件 JS。当这个按钮组件被设为 "),t("code",[e._v("Lazy")]),e._v(" 动态加载时，页面首次加载其实不会包含这个按钮的代码，而是等待需要这个组件时才去请求下载，以此达到"),t("code",[e._v("延迟加载")]),e._v("的效果，同时也降低首次进入网页时需要下载的 JavaScript 代码大小。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://i.imgur.com/gvAFTJ5.gif",alt:"转存失败，建议直接上传图片文件"}})]),e._v(" "),t("h2",{attrs:{id:"控制服务器端或客户端渲染组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#控制服务器端或客户端渲染组件"}},[e._v("#")]),e._v(" 控制服务器端或客户端渲染组件")]),e._v(" "),t("h3",{attrs:{id:"clientonly-组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#clientonly-组件"}},[e._v("#")]),e._v(" "),t("code",[e._v("<ClientOnly>")]),e._v(" 组件")]),e._v(" "),t("p",[e._v("Nuxt 3 提供了一个 "),t("code",[e._v("<ClientOnly>")]),e._v(" 组件，可以控制被包裹的组件仅在客户端进行渲染。")]),e._v(" "),t("p",[e._v("例如，我们建立 "),t("code",[e._v("./components/IronManWelcome.vue")]),e._v(" 文件，内容如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('<template>\n  <div class="bg-white py-24">\n    <div class="flex flex-col items-center">\n      <h1 class="text-6xl font-semibold text-sky-400">2022 iThome</h1>\n      <p class="mt-4 text-9xl font-bold text-gray-600">铁人赛</p>\n    </div>\n  </div>\n</template>\n')])])]),t("p",[e._v("使用 "),t("code",[e._v("<ClientOnly>")]),e._v(" 组件包裹 "),t("code",[e._v("<IronManWelcome>")]),e._v("。"),t("br"),e._v("\n调整 "),t("code",[e._v("./app.vue")]),e._v(" 中，内容如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("<template>\n  <div>\n    <ClientOnly>\n      <IronManWelcome />\n    </ClientOnly>\n  </div>\n</template>\n")])])]),t("p",[e._v("这样就可以将 "),t("code",[e._v("<IronManWelcome>")]),e._v(" 组件设定为仅在客户端进行渲染，首次请求页面时将不会包含这个组件的 HTML。")]),e._v(" "),t("p",[t("code",[e._v("<ClientOnly>")]),e._v(" 组件中提供了一个名为 "),t("code",[e._v("fallback")]),e._v(" 的插槽 (Slot)，可以用作于在服务器渲染的默认内容，等到客户端加载完成才接手渲染被包裹的 "),t("code",[e._v("<IronManWelcome>")]),e._v(" 组件。"),t("br"),e._v("\n调整 "),t("code",[e._v("./app.vue")]),e._v(" 中，内容如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('<template>\n  <div>\n    <ClientOnly>\n      <IronManWelcome />\n      <template #fallback>\n        <p class="my-6 flex justify-center">[IronManWelcome] 载入中...</p>\n      </template>\n    </ClientOnly>\n  </div>\n</template>\n')])])]),t("p",[e._v("当进入首次网页，会先渲染 "),t("code",[e._v("fallback")]),e._v(" 插槽内的元素，所以浏览器先显示 "),t("code",[e._v("[IronManWelcome] 载入中...")]),e._v(" 文字，接着客户端加载完 JS 后接手渲染 "),t("code",[e._v("<IronManWelcome>")]),e._v(" 组件。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b975af9b8c254a2890fc90afed4b9ad9~tplv-k3u1fbpfcp-zoom-1.image",alt:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/92ae55d0249948abae54e8cfe9882138~tplv-k3u1fbpfcp-zoom-1.image"}})]),e._v(" "),t("p",[e._v("你也可以通过浏览器页面中点击右键后展开菜单的「查看源码」功能，所看到的网页原始码，发现服务器端仅先回应了 "),t("code",[e._v('<p class="my-6 flex justify-center">[IronManWelcome] 载入中...</p>')]),e._v("，表示这是由服务器端渲染 "),t("code",[e._v("<ClientOnly>")]),e._v(" 元件 "),t("code",[e._v("fallback")]),e._v(" 插槽的内容。\n"),t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2a697364ec7b4a8d819db1cb862e4da7~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),e._v(" "),t("h3",{attrs:{id:"client-与-server"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#client-与-server"}},[e._v("#")]),e._v(" "),t("code",[e._v(".client")]),e._v(" 与 "),t("code",[e._v(".server")])]),e._v(" "),t("p",[e._v("Nuxt 3 的组件，也可以通过组件的文件名来控制仅显示在客户端或服务器端。")]),e._v(" "),t("p",[e._v("如果组件仅在客户端呈现，则可以将 "),t("code",[e._v(".client")]),e._v(" 加入组件文件名的后缀中。")]),e._v(" "),t("p",[e._v("我们可以创建一个 "),t("code",[e._v("./components/JustClient.client.vue")]),e._v(" 组件文件来表示只在客户端进行渲染的 "),t("code",[e._v("<JustClient>")]),e._v(" 组件。")]),e._v(" "),t("p",[e._v("而添加 "),t("code",[e._v(".server")]),e._v(" 后缀的组件文件，则会是这个组件在服务器端渲染的内容。")]),e._v(" "),t("h3",{attrs:{id:"控制服务器端或客户端渲染的组件示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#控制服务器端或客户端渲染的组件示例"}},[e._v("#")]),e._v(" 控制服务器端或客户端渲染的组件示例")]),e._v(" "),t("p",[e._v("我们可以使用 "),t("code",[e._v("<ClientOnly>")]),e._v(" 组件、"),t("code",[e._v(".client")]),e._v(" 和 "),t("code",[e._v(".server")]),e._v(" 来做一个示例来查看呈现效果。")]),e._v(" "),t("p",[t("code",[e._v("./components/IronManWelcome.vue")]),e._v("，內容如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('<template>\n  <div class="bg-white py-24">\n    <div class="flex flex-col items-center">\n      <h1 class="text-6xl font-semibold text-sky-400">2022 iThome</h1>\n    </div>\n  </div>\n</template>\n')])])]),t("p",[t("code",[e._v("./components/JustClient.client.vue")]),e._v("，內容如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('<template>\n  <div class="mx-16 my-4 rounded-lg bg-green-100 p-4 text-sm text-green-700">\n    <span class="font-semibold">[JustClient]</span>\n    <span class="ml-2">这是只有在 <span class="font-bold">Client</span> 才会渲染的组件</span>\n  </div>\n</template>\n')])])]),t("p",[t("code",[e._v("./components/ClientAndServer.client.vue")]),e._v("，內容如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('<template>\n  <div class="mx-16 my-4 rounded-lg bg-sky-100 p-4 text-sm text-sky-700">\n    <span class="font-semibold">[ClientAndServer]</span>\n    <span class="ml-2">\n      这是从 <span class="font-bold text-red-500">Client</span> 渲染出來的元件\n    </span>\n  </div>\n</template>\n')])])]),t("p",[t("code",[e._v("./components/ClientAndServer.server.vue")]),e._v("，內容如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('<template>\n  <div class="mx-16 my-4 rounded-lg bg-sky-100 p-4 text-sm text-sky-700">\n    <span class="font-semibold">[ClientAndServer]</span>\n    <span class="ml-2">\n      这是从 <span class="font-bold text-red-500">Server</span> 渲染出来的组件 请等待 Client\n      接手渲染\n    </span>\n  </div>\n</template>\n')])])]),t("p",[t("code",[e._v("./app.vue")]),e._v("，內容如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('<template>\n  <div>\n    <ClientOnly>\n      <IronManWelcome />\n      <template #fallback>\n        <p class="my-6 flex justify-center">[IronManWelcome] 正在载入..</p>\n      </template>\n    </ClientOnly>\n    <JustClient />\n    <ClientAndServer />\n  </div>\n</template>\n')])])]),t("p",[e._v("我们重新浏览网页，可以发现由服务器渲染的插槽元素 "),t("code",[e._v("[IronManWelcome] 载入中...")]),e._v(" 文字与 "),t("code",[e._v("ClientAndServer.server.vue")]),e._v(" 组件，率先被显示了出来。接着当 JS 载入完毕后，被包裹的组件 "),t("code",[e._v("<IronManWelcome>")]),e._v(" 也接手并覆盖了「[IronManWelcome] 载入中...」文字，"),t("code",[e._v("ClientAndServer.client.vue")]),e._v(" 和 "),t("code",[e._v("JustClient.client.vue")]),e._v(" 分别在客户端渲染的组件，也分别被覆盖和显示出来。")]),e._v(" "),t("h2",{attrs:{id:"小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[e._v("#")]),e._v(" 小结")]),e._v(" "),t("p",[e._v("通过组件我们能更好地整理可重复使用的代码，也提升了可维护性，而 Nuxt 中的动态加载更是能将非必要使用的组件延迟加载，大大提升了首次进入网页所需要下载的文件大小，最后我们也介绍了如何控制服务器端或客户端渲染组件，熟悉了之后就能针对网站需求设置组件的加载及渲染方式啦！")]),e._v(" "),t("hr"),e._v(" "),t("h4",{attrs:{id:"参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[e._v("#")]),e._v(" 参考资料")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://v3.nuxtjs.org/zh/guide/directory-structure/components",target:"_blank",rel:"noopener noreferrer"}},[e._v("Nuxt 3 - 组件目录"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://v3.nuxtjs.org/examples/auto-imports/components#components",target:"_blank",rel:"noopener noreferrer"}},[e._v("Nuxt 3 - 组件"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=s.exports}}]);